# User Level Threads Library

## Overview

This library implements user-level threads, allowing applications to manage multiple execution contexts without involving the kernel. The implementation uses `sigsetjmp` and `siglongjmp` for context switching between threads.

## Technical Details

### Context Switching with Signal Handling

- `sigsetjmp` stores the current execution context, including the signal mask when needed, into a buffer
- `siglongjmp` restores a previously saved context from the buffer
- When `sigsetjmp` receives a non-zero value as its second argument, it saves the current signal mask, which will be restored during `siglongjmp`
- If the second argument is zero, the signal mask remains unaffected

### Use Cases

A primary use case for user-level threads is GUI applications that need to:
- Handle user input
- Render UI elements
- Execute application logic

User-level threads enable these tasks to run in parallel without kernel involvement, giving the application control over:
- When each task executes
- How frequently each task runs
- Priority of different threads

## Process Isolation Example: Web Browsers

Modern web browsers demonstrate a different approach to parallelism with multi-process architecture:

### Advantages
- Each tab runs in a separate process, providing isolation
- Browser stability is improved (crashing tabs don't affect others)
- Resources can be managed separately for each tab
- Security is enhanced by preventing malicious code from affecting other tabs

### Disadvantages
- Higher overhead for operations like opening/closing tabs
- Inter-tab communication requires more complex mechanisms

## Signal Handling

The library handles signals similar to how terminal commands like `kill` work:

1. When a command is typed, hardware interrupts from the keyboard are passed to the shell
2. Executing a command like `kill` sends a `SIGTERM` signal to the process
3. The process handles the signal according to its registered handlers
4. The default handler for `SIGTERM` calls `exit()`

## Time Management

The library supports two types of timing:

- **Real time**: Actual elapsed wall-clock time
  - Example use: An alarm clock app that needs to ring at a specific time
  
- **Virtual time**: CPU processing time consumed by a specific process
  - Example use: A thread scheduler managing CPU time distribution between threads

## Implementation Notes

This library prioritizes simplicity and control over execution contexts, making it suitable for applications that need fine-grained control over parallel execution without the overhead of kernel-level thread management.
